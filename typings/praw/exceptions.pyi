"""
This type stub file was generated by pyright.
"""

from .util import _deprecate_args

"""PRAW exception classes.

Includes two main exceptions: :class:`.RedditAPIException` for when something goes wrong
on the server side, and :class:`.ClientException` when something goes wrong on the
client side. Both of these classes extend :class:`.PRAWException`.

All other exceptions are subclassed from :class:`.ClientException`.

"""
class PRAWException(Exception):
    """The base PRAW Exception that all other exception classes extend."""
    ...


class RedditErrorItem:
    """Represents a single error returned from Reddit's API."""
    @property
    def error_message(self) -> str:
        """Get the completed error message string."""
        ...
    
    def __eq__(self, other: RedditErrorItem | list[str]) -> bool:
        """Check for equality."""
        ...
    
    @_deprecate_args("error_type", "message", "field")
    def __init__(self, error_type: str, *, field: str | None = ..., message: str | None = ...) -> None:
        """Initialize a :class:`.RedditErrorItem` instance.

        :param error_type: The error type set on Reddit's end.
        :param field: The input field associated with the error, if available.
        :param message: The associated message for the error.

        """
        ...
    
    def __repr__(self) -> str:
        """Return an object initialization representation of the instance."""
        ...
    
    def __str__(self) -> str:
        """Get the message returned from str(self)."""
        ...
    


class ClientException(PRAWException):
    """Indicate exceptions that don't involve interaction with Reddit's API."""
    ...


class DuplicateReplaceException(ClientException):
    """Indicate exceptions that involve the replacement of :class:`.MoreComments`."""
    def __init__(self) -> None:
        """Initialize a :class:`.DuplicateReplaceException` instance."""
        ...
    


class InvalidFlairTemplateID(ClientException):
    """Indicate exceptions where an invalid flair template ID is given."""
    def __init__(self, template_id: str) -> None:
        """Initialize an :class:`.InvalidFlairTemplateID` instance."""
        ...
    


class InvalidImplicitAuth(ClientException):
    """Indicate exceptions where an implicit auth type is used incorrectly."""
    def __init__(self) -> None:
        """Initialize an :class:`.InvalidImplicitAuth` instance."""
        ...
    


class InvalidURL(ClientException):
    """Indicate exceptions where an invalid URL is entered."""
    @_deprecate_args("url", "message")
    def __init__(self, url: str, *, message: str = ...) -> None:
        """Initialize an :class:`.InvalidURL` instance.

        :param url: The invalid URL.
        :param message: The message to display. Must contain a format identifier (``{}``
            or ``{0}``) (default: ``"Invalid URL: {}"``).

        """
        ...
    


class MissingRequiredAttributeException(ClientException):
    """Indicate exceptions caused by not including a required attribute."""
    ...


class ReadOnlyException(ClientException):
    """Raised when a method call requires :attr:`.read_only` mode to be disabled."""
    ...


class TooLargeMediaException(ClientException):
    """Indicate exceptions from uploading media that's too large."""
    @_deprecate_args("maximum_size", "actual")
    def __init__(self, *, actual: int, maximum_size: int) -> None:
        """Initialize a :class:`.TooLargeMediaException` instance.

        :param actual: The actual size of the uploaded media.
        :param maximum_size: The maximum size of the uploaded media.

        """
        ...
    


class WebSocketException(ClientException):
    """Indicate exceptions caused by use of WebSockets."""
    @property
    def original_exception(self) -> Exception:
        """Access the ``original_exception`` attribute (now deprecated)."""
        ...
    
    @original_exception.setter
    def original_exception(self, value: Exception): # -> None:
        ...
    
    @original_exception.deleter
    def original_exception(self): # -> None:
        ...
    
    def __init__(self, message: str, exception: Exception | None) -> None:
        """Initialize a :class:`.WebSocketException` instance.

        :param message: The exception message.
        :param exception: The exception thrown by the websocket library.

            .. note::

                This parameter is deprecated. It will be removed in PRAW 8.0.

        """
        ...
    


class MediaPostFailed(WebSocketException):
    """Indicate exceptions where media uploads failed.."""
    def __init__(self) -> None:
        """Initialize a :class:`.MediaPostFailed` instance."""
        ...
    


class APIException(PRAWException):
    """Old class preserved for alias purposes.

    .. deprecated:: 7.0

        Class :class:`.APIException` has been deprecated in favor of
        :class:`.RedditAPIException`. This class will be removed in PRAW 8.0.

    """
    @staticmethod
    def parse_exception_list(exceptions: list[RedditErrorItem | list[str]]) -> list[RedditErrorItem]:
        """Covert an exception list into a :class:`.RedditErrorItem` list."""
        ...
    
    @property
    def error_type(self) -> str:
        """Get error_type.

        .. deprecated:: 7.0

            Accessing attributes through instances of :class:`.RedditAPIException` is
            deprecated. This behavior will be removed in PRAW 8.0. Check out the
            :ref:`PRAW 7 Migration tutorial <Exception_Handling>` on how to migrate code
            from this behavior.

        """
        ...
    
    @property
    def field(self) -> str:
        """Get field.

        .. deprecated:: 7.0

            Accessing attributes through instances of :class:`.RedditAPIException` is
            deprecated. This behavior will be removed in PRAW 8.0. Check out the
            :ref:`PRAW 7 Migration tutorial <Exception_Handling>` on how to migrate code
            from this behavior.

        """
        ...
    
    @property
    def message(self) -> str:
        """Get message.

        .. deprecated:: 7.0

            Accessing attributes through instances of :class:`.RedditAPIException` is
            deprecated. This behavior will be removed in PRAW 8.0. Check out the
            :ref:`PRAW 7 Migration tutorial <Exception_Handling>` on how to migrate code
            from this behavior.

        """
        ...
    
    def __init__(self, items: list[RedditErrorItem | list[str] | str] | str, *optional_args: str) -> None:
        """Initialize a :class:`.RedditAPIException` instance.

        :param items: Either a list of instances of :class:`.RedditErrorItem` or a list
            containing lists of unformed errors.
        :param optional_args: Takes the second and third arguments that
            :class:`.APIException` used to take.

        """
        ...
    


class RedditAPIException(APIException):
    """Container for error messages from Reddit's API."""
    ...


