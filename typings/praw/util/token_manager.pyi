"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

import praw
import prawcore

from . import _deprecate_args

"""Token Manager classes.

There should be a 1-to-1 mapping between an instance of a subclass of
:class:`.BaseTokenManager` and a :class:`.Reddit` instance.

A few proof of concept token manager classes are provided here, but it is expected that
PRAW users will create their own token manager classes suitable for their needs.

.. deprecated:: 7.4.0

    Tokens managers have been deprecated and will be removed in the near future.

"""
if TYPE_CHECKING:
    ...
class BaseTokenManager(ABC):
    """An abstract class for all token managers."""
    @abstractmethod
    def post_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Handle callback that is invoked after a refresh token is used.

        :param authorizer: The ``prawcore.Authorizer`` instance used containing
            ``access_token`` and ``refresh_token`` attributes.

        This function will be called after refreshing the access and refresh tokens.
        This callback can be used for saving the updated ``refresh_token``.

        """
        ...
    
    @abstractmethod
    def pre_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Handle callback that is invoked before refreshing PRAW's authorization.

        :param authorizer: The ``prawcore.Authorizer`` instance used containing
            ``access_token`` and ``refresh_token`` attributes.

        This callback can be used to inspect and modify the attributes of the
        ``prawcore.Authorizer`` instance, such as setting the ``refresh_token``.

        """
        ...
    
    @property
    def reddit(self) -> praw.Reddit:
        """Return the :class:`.Reddit` instance bound to the token manager."""
        ...
    
    @reddit.setter
    def reddit(self, value: praw.Reddit): # -> None:
        ...
    
    def __init__(self) -> None:
        """Initialize a :class:`.BaseTokenManager` instance."""
        ...
    


class FileTokenManager(BaseTokenManager):
    """Provides a single-file based token manager.

    It is expected that the file with the initial ``refresh_token`` is created prior to
    use.

    .. warning::

        The same ``file`` should not be used by more than one instance of this class
        concurrently. Doing so may result in data corruption. Consider using
        :class:`.SQLiteTokenManager` if you want more than one instance of PRAW to
        concurrently manage a specific ``refresh_token`` chain.

    """
    def __init__(self, filename: str) -> None:
        """Initialize a :class:`.FileTokenManager` instance.

        :param filename: The file the contains the refresh token.

        """
        ...
    
    def post_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Update the saved copy of the refresh token."""
        ...
    
    def pre_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Load the refresh token from the file."""
        ...
    


class SQLiteTokenManager(BaseTokenManager):
    """Provides a SQLite3 based token manager.

    Unlike, :class:`.FileTokenManager`, the initial database need not be created ahead
    of time, as it'll automatically be created on first use. However, initial refresh
    tokens will need to be registered via :meth:`.register` prior to use.

    .. warning::

        This class is untested on Windows because we encountered file locking issues in
        the test environment.

    """
    @_deprecate_args("database", "key")
    def __init__(self, *, database: str, key: str) -> None:
        """Initialize a :class:`.SQLiteTokenManager` instance.

        :param database: The path to the SQLite database.
        :param key: The key used to locate the refresh token. This ``key`` can be
            anything. You might use the ``client_id`` if you expect to have unique a
            refresh token for each ``client_id``, or you might use a redditor's
            ``username`` if you're managing multiple users' authentications.

        """
        ...
    
    def is_registered(self) -> bool:
        """Return whether ``key`` already has a ``refresh_token``."""
        ...
    
    def post_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Update the refresh token in the database."""
        ...
    
    def pre_refresh_callback(self, authorizer: prawcore.auth.BaseAuthorizer): # -> None:
        """Load the refresh token from the database."""
        ...
    
    def register(self, refresh_token: str) -> bool:
        """Register the initial refresh token in the database.

        :returns: ``True`` if ``refresh_token`` is saved to the database, otherwise,
            ``False`` if there is already a ``refresh_token`` for the associated
            ``key``.

        """
        ...
    


