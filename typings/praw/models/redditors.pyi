"""
This type stub file was generated by pyright.
"""

from types import SimpleNamespace
from typing import TYPE_CHECKING, Iterable, Iterator

import praw.models

from .base import PRAWBase

"""Provide the Redditors class."""
if TYPE_CHECKING:
    ...
class PartialRedditor(SimpleNamespace):
    """A namespace object that provides a subset of :class:`.Redditor` attributes."""
    ...


class Redditors(PRAWBase):
    """Redditors is a Listing class that provides various :class:`.Redditor` lists."""
    def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for new :class:`.Redditors`.

        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def partial_redditors(self, ids: Iterable[str]) -> Iterator[PartialRedditor]:
        """Get user summary data by redditor IDs.

        :param ids: An iterable of redditor fullname IDs.

        :returns: A iterator producing :class:`.PartialRedditor` objects.

        Each ID must be prefixed with ``t2_``.

        Invalid IDs are ignored by the server.

        """
        ...
    
    def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for popular :class:`.Redditors`.

        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        r"""Return a :class:`.ListingGenerator` of Redditors for ``query``.

        :param query: The query string to filter Redditors by.

        :returns: :class:`.Redditor`\ s.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Yield new Redditors as they are created.

        Redditors are yielded oldest first. Up to 100 historical Redditors will
        initially be returned.

        Keyword arguments are passed to :func:`.stream_generator`.

        :returns: :class:`.Redditor` profiles, which are a type of :class:`.Subreddit`.

        """
        ...
    


