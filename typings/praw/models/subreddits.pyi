"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Any, Iterator

import praw.models

from ..util import _deprecate_args
from . import Subreddit
from .base import PRAWBase

"""Provide the Subreddits class."""
if TYPE_CHECKING:
    ...
class Subreddits(PRAWBase):
    """Subreddits is a Listing class that provides various subreddit lists."""
    def default(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for default subreddits.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def gold(self, **generator_kwargs: Any) -> Iterator[praw.models.Subreddit]:
        """Alias for :meth:`.premium` to maintain backwards compatibility."""
        ...
    
    def new(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for new subreddits.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def popular(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for popular subreddits.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def premium(self, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` for premium subreddits.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        """
        ...
    
    def recommended(self, subreddits: list[str | praw.models.Subreddit], omit_subreddits: list[str | praw.models.Subreddit] | None = ...) -> list[praw.models.Subreddit]:
        """Return subreddits recommended for the given list of subreddits.

        :param subreddits: A list of :class:`.Subreddit` instances and/or subreddit
            names.
        :param omit_subreddits: A list of :class:`.Subreddit` instances and/or subreddit
            names to exclude from the results (Reddit's end may not work as expected).

        """
        ...
    
    def search(self, query: str, **generator_kwargs: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Return a :class:`.ListingGenerator` of subreddits matching ``query``.

        Subreddits are searched by both their title and description.

        :param query: The query string to filter subreddits by.

        Additional keyword arguments are passed in the initialization of
        :class:`.ListingGenerator`.

        .. seealso::

            :meth:`.search_by_name` to search by subreddit names

        """
        ...
    
    @_deprecate_args("query", "include_nsfw", "exact")
    def search_by_name(self, query: str, *, include_nsfw: bool = ..., exact: bool = ...) -> list[praw.models.Subreddit]:
        r"""Return list of :class:`.Subreddit`\ s whose names begin with ``query``.

        :param query: Search for subreddits beginning with this string.
        :param exact: Return only exact matches to ``query`` (default: ``False``).
        :param include_nsfw: Include subreddits labeled NSFW (default: ``True``).

        """
        ...
    
    def search_by_topic(self, query: str) -> list[praw.models.Subreddit]:
        """Return list of Subreddits whose topics match ``query``.

        :param query: Search for subreddits relevant to the search topic.

        .. note::

            As of 09/01/2020, this endpoint always returns 404.

        """
        ...
    
    def stream(self, **stream_options: str | int | dict[str, str]) -> Iterator[praw.models.Subreddit]:
        """Yield new subreddits as they are created.

        Subreddits are yielded oldest first. Up to 100 historical subreddits will
        initially be returned.

        Keyword arguments are passed to :func:`.stream_generator`.

        """
        ...
    


