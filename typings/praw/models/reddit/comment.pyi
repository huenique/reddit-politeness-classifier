"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Any

import praw.models

from ...util.cache import cachedproperty
from ..comment_forest import CommentForest
from .base import RedditBase
from .mixins import (FullnameMixin, InboxableMixin, ThingModerationMixin,
                     UserContentMixin)
from .redditor import Redditor

"""Provide the Comment class."""
if TYPE_CHECKING:
    ...
class Comment(InboxableMixin, UserContentMixin, FullnameMixin, RedditBase):
    """A class that represents a Reddit comment.

    .. include:: ../../typical_attributes.rst

    ================= =================================================================
    Attribute         Description
    ================= =================================================================
    ``author``        Provides an instance of :class:`.Redditor`.
    ``body``          The body of the comment, as Markdown.
    ``body_html``     The body of the comment, as HTML.
    ``created_utc``   Time the comment was created, represented in `Unix Time`_.
    ``distinguished`` Whether or not the comment is distinguished.
    ``edited``        Whether or not the comment has been edited.
    ``id``            The ID of the comment.
    ``is_submitter``  Whether or not the comment author is also the author of the
                      submission.
    ``link_id``       The submission ID that the comment belongs to.
    ``parent_id``     The ID of the parent comment (prefixed with ``t1_``). If it is a
                      top-level comment, this returns the submission ID instead
                      (prefixed with ``t3_``).
    ``permalink``     A permalink for the comment. :class:`.Comment` objects from the
                      inbox have a ``context`` attribute instead.
    ``replies``       Provides an instance of :class:`.CommentForest`.
    ``saved``         Whether or not the comment is saved.
    ``score``         The number of upvotes for the comment.
    ``stickied``      Whether or not the comment is stickied.
    ``submission``    Provides an instance of :class:`.Submission`. The submission that
                      the comment belongs to.
    ``subreddit``     Provides an instance of :class:`.Subreddit`. The subreddit that
                      the comment belongs to.
    ``subreddit_id``  The subreddit ID that the comment belongs to.
    ================= =================================================================

    .. _unix time: https://en.wikipedia.org/wiki/Unix_time

    """
    MISSING_COMMENT_MESSAGE = ...
    STR_FIELD = ...
    @staticmethod
    def id_from_url(url: str) -> str:
        """Get the ID of a comment from the full URL."""
        ...
    
    @cachedproperty
    def mod(self) -> praw.models.reddit.comment.CommentModeration:
        """Provide an instance of :class:`.CommentModeration`.

        Example usage:

        .. code-block:: python

            comment = reddit.comment("dkk4qjd")
            comment.mod.approve()

        """
        ...
    
    @property
    def is_root(self) -> bool:
        """Return ``True`` when the comment is a top-level comment."""
        ...
    
    @property
    def replies(self) -> CommentForest:
        """Provide an instance of :class:`.CommentForest`.

        This property may return an empty list if the comment has not been refreshed
        with :meth:`.refresh`

        Sort order and reply limit can be set with the ``reply_sort`` and
        ``reply_limit`` attributes before replies are fetched, including any call to
        :meth:`.refresh`:

        .. code-block:: python

            comment.reply_sort = "new"
            comment.refresh()
            replies = comment.replies

        .. note::

            The appropriate values for ``reply_sort`` include ``"confidence"``,
            ``"controversial"``, ``"new"``, ``"old"``, ``"q&a"``, and ``"top"``.

        """
        ...
    
    @property
    def submission(self) -> praw.models.Submission:
        """Return the :class:`.Submission` object this comment belongs to."""
        ...
    
    @submission.setter
    def submission(self, submission: praw.models.Submission): # -> None:
        """Update the :class:`.Submission` associated with the :class:`.Comment`."""
        ...
    
    def __init__(self, reddit: praw.Reddit, id: str | None = ..., url: str | None = ..., _data: dict[str, Any] | None = ...) -> None:
        """Initialize a :class:`.Comment` instance."""
        ...
    
    def __setattr__(self, attribute: str, value: str | Redditor | CommentForest | praw.models.Subreddit): # -> None:
        """Objectify author, replies, and subreddit."""
        ...
    
    def parent(self) -> Comment | praw.models.Submission:
        """Return the parent of the comment.

        The returned parent will be an instance of either :class:`.Comment`, or
        :class:`.Submission`.

        If this comment was obtained through a :class:`.Submission`, then its entire
        ancestry should be immediately available, requiring no extra network requests.
        However, if this comment was obtained through other means, e.g.,
        ``reddit.comment("COMMENT_ID")``, or ``reddit.inbox.comment_replies``, then the
        returned parent may be a lazy instance of either :class:`.Comment`, or
        :class:`.Submission`.

        Lazy comment example:

        .. code-block:: python

            comment = reddit.comment("cklhv0f")
            parent = comment.parent()
            # 'replies' is empty until the comment is refreshed
            print(parent.replies)  # Output: []
            parent.refresh()
            print(parent.replies)  # Output is at least: [Comment(id="cklhv0f")]

        .. warning::

            Successive calls to :meth:`.parent` may result in a network request per call
            when the comment is not obtained through a :class:`.Submission`. See below
            for an example of how to minimize requests.

        If you have a deeply nested comment and wish to most efficiently discover its
        top-most :class:`.Comment` ancestor you can chain successive calls to
        :meth:`.parent` with calls to :meth:`.refresh` at every 9 levels. For example:

        .. code-block:: python

            comment = reddit.comment("dkk4qjd")
            ancestor = comment
            refresh_counter = 0
            while not ancestor.is_root:
                ancestor = ancestor.parent()
                if refresh_counter % 9 == 0:
                    ancestor.refresh()
                refresh_counter += 1
            print(f"Top-most Ancestor: {ancestor}")

        The above code should result in 5 network requests to Reddit. Without the calls
        to :meth:`.refresh` it would make at least 31 network requests.

        """
        ...
    
    def refresh(self) -> Comment:
        """Refresh the comment's attributes.

        If using :meth:`.Reddit.comment` this method must be called in order to obtain
        the comment's replies.

        Example usage:

        .. code-block:: python

            comment = reddit.comment("dkk4qjd")
            comment.refresh()

        """
        ...
    


class CommentModeration(ThingModerationMixin):
    """Provide a set of functions pertaining to :class:`.Comment` moderation.

    Example usage:

    .. code-block:: python

        comment = reddit.comment("dkk4qjd")
        comment.mod.approve()

    """
    REMOVAL_MESSAGE_API = ...
    def __init__(self, comment: praw.models.Comment) -> None:
        """Initialize a :class:`.CommentModeration` instance.

        :param comment: The comment to moderate.

        """
        ...
    
    def show(self): # -> None:
        """Uncollapse a :class:`.Comment` that has been collapsed by Crowd Control.

        Example usage:

        .. code-block:: python

            # Uncollapse a comment:
            comment = reddit.comment("dkk4qjd")
            comment.mod.show()

        """
        ...
    


