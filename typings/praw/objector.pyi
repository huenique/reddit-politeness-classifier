"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Any

import praw

from .exceptions import RedditAPIException
from .models.reddit.base import RedditBase

"""Provides the Objector class."""
if TYPE_CHECKING:
    ...
class Objector:
    """The objector builds :class:`.RedditBase` objects."""
    @classmethod
    def check_error(cls, data: list[Any] | dict[str, dict[str, str]]): # -> None:
        """Raise an error if the argument resolves to an error object."""
        ...
    
    @classmethod
    def parse_error(cls, data: list[Any] | dict[str, dict[str, str]]) -> RedditAPIException | None:
        """Convert JSON response into an error object.

        :param data: The dict to be converted.

        :returns: An instance of :class:`.RedditAPIException`, or ``None`` if ``data``
            doesn't fit this model.

        """
        ...
    
    def __init__(self, reddit: praw.Reddit, parsers: dict[str, Any] | None = ...) -> None:
        """Initialize an :class:`.Objector` instance.

        :param reddit: An instance of :class:`.Reddit`.

        """
        ...
    
    def objectify(self, data: dict[str, Any] | list[Any] | bool | None) -> RedditBase | dict[str, Any] | list[Any] | bool | None:
        """Create :class:`.RedditBase` objects from data.

        :param data: The structured data.

        :returns: An instance of :class:`.RedditBase`, or ``None`` if given ``data`` is
            ``None``.

        """
        ...
    


